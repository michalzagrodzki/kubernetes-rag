# Build stage
FROM node:20-alpine AS build
WORKDIR /app

# Pass API URL at build-time: --build-arg VITE_API_URL=https://api.example.com
ARG VITE_API_URL
ENV VITE_API_URL=${VITE_API_URL}

# Copy only the frontend manifest first to leverage layer caching
COPY frontend/package*.json ./
RUN npm ci

# Copy the rest of the frontend source from the nested folder
COPY frontend/ ./

# Build production assets
RUN npm run build

# Serve stage
FROM nginxinc/nginx-unprivileged:stable-alpine AS serve
WORKDIR /usr/share/nginx/html

# Copy built assets
COPY --from=build /app/dist/ .

# Minimal SPA config for unprivileged Nginx (listens on 8080)
USER root
RUN rm -f /etc/nginx/conf.d/default.conf && \
    echo 'server {' > /etc/nginx/conf.d/spa.conf && \
    echo '  listen 8080;' >> /etc/nginx/conf.d/spa.conf && \
    echo '  server_name _;' >> /etc/nginx/conf.d/spa.conf && \
    echo '  root /usr/share/nginx/html;' >> /etc/nginx/conf.d/spa.conf && \
    echo '  index index.html;' >> /etc/nginx/conf.d/spa.conf && \
    echo '  # Serve the SPA entry directly to avoid loops' >> /etc/nginx/conf.d/spa.conf && \
    echo '  location = /index.html { }' >> /etc/nginx/conf.d/spa.conf && \
    echo '  # Try static files first, then fall back to SPA' >> /etc/nginx/conf.d/spa.conf && \
    echo '  location / {' >> /etc/nginx/conf.d/spa.conf && \
    echo '    try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/spa.conf && \
    echo '  }' >> /etc/nginx/conf.d/spa.conf && \
    echo '}' >> /etc/nginx/conf.d/spa.conf && \
    chown -R 101:101 /usr/share/nginx/html /etc/nginx/conf.d
USER 101

EXPOSE 8080
