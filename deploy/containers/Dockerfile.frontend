# Build stage
FROM node:current-alpine3.22@sha256:3e843c608bb5232f39ecb2b25e41214b958b0795914707374c8acc28487dea17 AS build

RUN mkdir -p /app && chown -R node:node /app
WORKDIR /app
USER node

# Pass API URL at build-time: --build-arg VITE_API_URL=https://api.example.com
ARG VITE_API_URL
ENV VITE_API_URL=${VITE_API_URL}

ENV npm_config_loglevel=warn \
  npm_config_fund=false \
  npm_config_audit=false \
  CI=true

# Copy only the frontend manifest first to leverage layer caching
COPY --chown=node:node frontend/package*.json ./
RUN npm ci

# Copy the rest as node and build without network access (defense-in-depth)
COPY --chown=node:node frontend/ ./
RUN --network=none npm run build

# Serve stage
FROM nginxinc/nginx-unprivileged:alpine3.22@sha256:9fda08cc7f7580567e9d8c477420d7beadb9387d4004074c89f41f9d90ecf300 AS serve
WORKDIR /usr/share/nginx/html

# Copy built assets and template with proper ownership (avoid chown at runtime)
COPY --from=build --chown=101:101 /app/dist/ .
COPY --chown=101:101 deploy/containers/nginx-default.conf.template /etc/nginx/templates/default.conf.template

# Briefly switch to root only to remove the default site if needed
USER root
RUN rm -f /etc/nginx/conf.d/default.conf
USER 101

# Minimal SPA env var for template expansion
ENV BACKEND_URL=http://host.docker.internal:8000

EXPOSE 8080

# Lightweight liveness check
HEALTHCHECK --interval=60s --timeout=3s --retries=3 CMD wget -qO- http://127.0.0.1:8080/ >/dev/null 2>&1 || exit 1
