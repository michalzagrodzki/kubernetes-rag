apiVersion: v1
kind: PersistentVolumeClaim
metadata: { name: pgdata, namespace: rag-dev }
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 10Gi } }

---
apiVersion: apps/v1
kind: StatefulSet
metadata: { name: postgres, namespace: rag-dev }
spec:
  serviceName: postgres
  replicas: 1
  selector: { matchLabels: { app: postgres } }
  template:
    metadata: { labels: { app: postgres } }
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
        - name: postgres
          image: pgvector/pgvector:pg16
          ports: [{ containerPort: 5432, name: pg }]
          envFrom: [{ secretRef: { name: db-secrets } }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            exec: { command: ["pg_isready","-U","$(POSTGRES_USER)","-d","$(POSTGRES_DB)"] }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            exec: { command: ["pg_isready","-U","$(POSTGRES_USER)","-d","$(POSTGRES_DB)"] }
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests: { cpu: "250m", memory: "256Mi" }
            limits:   { cpu: "1",    memory: "1Gi" }
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: pgdata }

---
apiVersion: v1
kind: Service
metadata: { name: postgres, namespace: rag-dev }
spec:
  selector: { app: postgres }
  ports: [{ name: pg, port: 5432, targetPort: 5432 }]
  type: ClusterIP
